// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// SnapshotSpec defines the desired state of Snapshot.
//
// Represents a copy of an entire cluster as of the time when the snapshot was
// taken.
type SnapshotSpec struct {

	// The snapshot is created from this cluster.
	// +kubebuilder:validation:Required
	ClusterName *string `json:"clusterName"`
	// The ID of the KMS key used to encrypt the snapshot.
	KMSKeyID *string `json:"kmsKeyID,omitempty"`
	// A name for the snapshot being created.
	// +kubebuilder:validation:Required
	Name *string `json:"name"`
	// The name of an existing snapshot from which to make a copy.
	SourceSnapshotName *string `json:"sourceSnapshotName,omitempty"`
	// A list of tags to be added to this resource. A tag is a key-value pair. A
	// tag key must be accompanied by a tag value, although null is accepted.
	Tags []*Tag `json:"tags,omitempty"`
}

// SnapshotStatus defines the observed state of Snapshot
type SnapshotStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRS managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
	// The configuration of the cluster from which the snapshot was taken
	// +kubebuilder:validation:Optional
	ClusterConfiguration *ClusterConfiguration `json:"clusterConfiguration,omitempty"`
	// Indicates whether the snapshot is from an automatic backup (automated) or
	// was created manually (manual).
	// +kubebuilder:validation:Optional
	Source *string `json:"source,omitempty"`
	// The status of the snapshot. Valid values: creating | available | restoring
	// | copying | deleting.
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty"`
}

// Snapshot is the Schema for the Snapshots API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type Snapshot struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SnapshotSpec   `json:"spec,omitempty"`
	Status            SnapshotStatus `json:"status,omitempty"`
}

// SnapshotList contains a list of Snapshot
// +kubebuilder:object:root=true
type SnapshotList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Snapshot `json:"items"`
}

func init() {
	SchemeBuilder.Register(&Snapshot{}, &SnapshotList{})
}
