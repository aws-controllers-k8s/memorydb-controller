// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// UserSpec defines the desired state of User.
//
// You create users and assign them specific permissions by using an access
// string. You assign the users to Access Control Lists aligned with a specific
// role (administrators, human resources) that are then deployed to one or more
// MemoryDB clusters.
type UserSpec struct {

	// Access permissions string used for this user.
	// +kubebuilder:validation:Required
	AccessString *string `json:"accessString"`
	// Denotes the user's authentication properties, such as whether it requires
	// a password to authenticate.
	// +kubebuilder:validation:Required
	AuthenticationMode *AuthenticationMode `json:"authenticationMode"`
	// The name of the user. This value must be unique as it also serves as the
	// user identifier.
	// +kubebuilder:validation:Required
	Name *string `json:"name"`
	// A list of tags to be added to this resource. A tag is a key-value pair. A
	// tag key must be accompanied by a tag value, although null is accepted.
	Tags []*Tag `json:"tags,omitempty"`
}

// UserStatus defines the observed state of User
type UserStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRS managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
	// The names of the Access Control Lists to which the user belongs
	// +kubebuilder:validation:Optional
	ACLNames []*string `json:"aclNames,omitempty"`
	// Denotes whether the user requires a password to authenticate.
	// +kubebuilder:validation:Optional
	Authentication *Authentication `json:"authentication,omitempty"`
	// A list of events. Each element in the list contains detailed information
	// about one event.
	// +kubebuilder:validation:Optional
	Events []*Event `json:"events,omitempty"`
	// The minimum engine version supported for the user
	// +kubebuilder:validation:Optional
	MinimumEngineVersion *string `json:"minimumEngineVersion,omitempty"`
	// Indicates the user status. Can be "active", "modifying" or "deleting".
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty"`
}

// User is the Schema for the Users API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type User struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              UserSpec   `json:"spec,omitempty"`
	Status            UserStatus `json:"status,omitempty"`
}

// UserList contains a list of User
// +kubebuilder:object:root=true
type UserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []User `json:"items"`
}

func init() {
	SchemeBuilder.Register(&User{}, &UserList{})
}
